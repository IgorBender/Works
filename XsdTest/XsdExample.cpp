// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "XsdExample.h"

namespace XsdExample
{
  // PurchaseOrderType
  // 

  const PurchaseOrderType::ShipTo_sequence& PurchaseOrderType::
  ShipTo () const
  {
    return this->ShipTo_;
  }

  PurchaseOrderType::ShipTo_sequence& PurchaseOrderType::
  ShipTo ()
  {
    return this->ShipTo_;
  }

  void PurchaseOrderType::
  ShipTo (const ShipTo_sequence& s)
  {
    this->ShipTo_ = s;
  }

  const PurchaseOrderType::BillTo_type& PurchaseOrderType::
  BillTo () const
  {
    return this->BillTo_.get ();
  }

  PurchaseOrderType::BillTo_type& PurchaseOrderType::
  BillTo ()
  {
    return this->BillTo_.get ();
  }

  void PurchaseOrderType::
  BillTo (const BillTo_type& x)
  {
    this->BillTo_.set (x);
  }

  void PurchaseOrderType::
  BillTo (::std::unique_ptr< BillTo_type > x)
  {
    this->BillTo_.set (std::move (x));
  }

  const PurchaseOrderType::OrderDate_optional& PurchaseOrderType::
  OrderDate () const
  {
    return this->OrderDate_;
  }

  PurchaseOrderType::OrderDate_optional& PurchaseOrderType::
  OrderDate ()
  {
    return this->OrderDate_;
  }

  void PurchaseOrderType::
  OrderDate (const OrderDate_type& x)
  {
    this->OrderDate_.set (x);
  }

  void PurchaseOrderType::
  OrderDate (const OrderDate_optional& x)
  {
    this->OrderDate_ = x;
  }

  void PurchaseOrderType::
  OrderDate (::std::unique_ptr< OrderDate_type > x)
  {
    this->OrderDate_.set (std::move (x));
  }


  // USAddress
  // 

  const USAddress::name_type& USAddress::
  name () const
  {
    return this->name_.get ();
  }

  USAddress::name_type& USAddress::
  name ()
  {
    return this->name_.get ();
  }

  void USAddress::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void USAddress::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }

  const USAddress::street_type& USAddress::
  street () const
  {
    return this->street_.get ();
  }

  USAddress::street_type& USAddress::
  street ()
  {
    return this->street_.get ();
  }

  void USAddress::
  street (const street_type& x)
  {
    this->street_.set (x);
  }

  void USAddress::
  street (::std::unique_ptr< street_type > x)
  {
    this->street_.set (std::move (x));
  }

  const USAddress::city_type& USAddress::
  city () const
  {
    return this->city_.get ();
  }

  USAddress::city_type& USAddress::
  city ()
  {
    return this->city_.get ();
  }

  void USAddress::
  city (const city_type& x)
  {
    this->city_.set (x);
  }

  void USAddress::
  city (::std::unique_ptr< city_type > x)
  {
    this->city_.set (std::move (x));
  }

  const USAddress::state_type& USAddress::
  state () const
  {
    return this->state_.get ();
  }

  USAddress::state_type& USAddress::
  state ()
  {
    return this->state_.get ();
  }

  void USAddress::
  state (const state_type& x)
  {
    this->state_.set (x);
  }

  void USAddress::
  state (::std::unique_ptr< state_type > x)
  {
    this->state_.set (std::move (x));
  }

  const USAddress::zip_type& USAddress::
  zip () const
  {
    return this->zip_.get ();
  }

  USAddress::zip_type& USAddress::
  zip ()
  {
    return this->zip_.get ();
  }

  void USAddress::
  zip (const zip_type& x)
  {
    this->zip_.set (x);
  }

  const USAddress::country_optional& USAddress::
  country () const
  {
    return this->country_;
  }

  USAddress::country_optional& USAddress::
  country ()
  {
    return this->country_;
  }

  void USAddress::
  country (const country_type& x)
  {
    this->country_.set (x);
  }

  void USAddress::
  country (const country_optional& x)
  {
    this->country_ = x;
  }

  void USAddress::
  country (::std::unique_ptr< country_type > x)
  {
    this->country_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace XsdExample
{
  // PurchaseOrderType
  //

  PurchaseOrderType::
  PurchaseOrderType (const BillTo_type& BillTo)
  : ::xml_schema::type (),
    ShipTo_ (this),
    BillTo_ (BillTo, this),
    OrderDate_ (this)
  {
  }

  PurchaseOrderType::
  PurchaseOrderType (::std::unique_ptr< BillTo_type > BillTo)
  : ::xml_schema::type (),
    ShipTo_ (this),
    BillTo_ (std::move (BillTo), this),
    OrderDate_ (this)
  {
  }

  PurchaseOrderType::
  PurchaseOrderType (const PurchaseOrderType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ShipTo_ (x.ShipTo_, f, this),
    BillTo_ (x.BillTo_, f, this),
    OrderDate_ (x.OrderDate_, f, this)
  {
  }

  PurchaseOrderType::
  PurchaseOrderType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ShipTo_ (this),
    BillTo_ (this),
    OrderDate_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void PurchaseOrderType::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ShipTo
      //
      if (n.name () == "ShipTo" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< ShipTo_type > r (
          ShipTo_traits::create (i, f, this));

        this->ShipTo_.push_back (::std::move (r));
        continue;
      }

      // BillTo
      //
      if (n.name () == "BillTo" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< BillTo_type > r (
          BillTo_traits::create (i, f, this));

        if (!BillTo_.present ())
        {
          this->BillTo_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!BillTo_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "BillTo",
        "XsdExample.xsd");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "OrderDate" && n.namespace_ ().empty ())
      {
        this->OrderDate_.set (OrderDate_traits::create (i, f, this));
        continue;
      }
    }
  }

  PurchaseOrderType* PurchaseOrderType::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class PurchaseOrderType (*this, f, c);
  }

  PurchaseOrderType& PurchaseOrderType::
  operator= (const PurchaseOrderType& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->ShipTo_ = x.ShipTo_;
      this->BillTo_ = x.BillTo_;
      this->OrderDate_ = x.OrderDate_;
    }

    return *this;
  }

  PurchaseOrderType::
  ~PurchaseOrderType ()
  {
  }

  // USAddress
  //

  USAddress::
  USAddress (const name_type& name,
             const street_type& street,
             const city_type& city,
             const state_type& state,
             const zip_type& zip)
  : ::xml_schema::type (),
    name_ (name, this),
    street_ (street, this),
    city_ (city, this),
    state_ (state, this),
    zip_ (zip, this),
    country_ (this)
  {
  }

  USAddress::
  USAddress (const USAddress& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    street_ (x.street_, f, this),
    city_ (x.city_, f, this),
    state_ (x.state_, f, this),
    zip_ (x.zip_, f, this),
    country_ (x.country_, f, this)
  {
  }

  USAddress::
  USAddress (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    street_ (this),
    city_ (this),
    state_ (this),
    zip_ (this),
    country_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void USAddress::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // street
      //
      if (n.name () == "street" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< street_type > r (
          street_traits::create (i, f, this));

        if (!street_.present ())
        {
          this->street_.set (::std::move (r));
          continue;
        }
      }

      // city
      //
      if (n.name () == "city" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< city_type > r (
          city_traits::create (i, f, this));

        if (!city_.present ())
        {
          this->city_.set (::std::move (r));
          continue;
        }
      }

      // state
      //
      if (n.name () == "state" && n.namespace_ () == "XsdExample.xsd")
      {
        ::std::unique_ptr< state_type > r (
          state_traits::create (i, f, this));

        if (!state_.present ())
        {
          this->state_.set (::std::move (r));
          continue;
        }
      }

      // zip
      //
      if (n.name () == "zip" && n.namespace_ () == "XsdExample.xsd")
      {
        if (!zip_.present ())
        {
          this->zip_.set (zip_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "XsdExample.xsd");
    }

    if (!street_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "street",
        "XsdExample.xsd");
    }

    if (!city_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "city",
        "XsdExample.xsd");
    }

    if (!state_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "state",
        "XsdExample.xsd");
    }

    if (!zip_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "zip",
        "XsdExample.xsd");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "country" && n.namespace_ ().empty ())
      {
        this->country_.set (country_traits::create (i, f, this));
        continue;
      }
    }
  }

  USAddress* USAddress::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class USAddress (*this, f, c);
  }

  USAddress& USAddress::
  operator= (const USAddress& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->name_ = x.name_;
      this->street_ = x.street_;
      this->city_ = x.city_;
      this->state_ = x.state_;
      this->zip_ = x.zip_;
      this->country_ = x.country_;
    }

    return *this;
  }

  USAddress::
  ~USAddress ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace XsdExample
{
  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XsdExample::PurchaseOrder (isrc, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XsdExample::PurchaseOrder (isrc, h, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::XsdExample::PurchaseOrder (isrc, h, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XsdExample::PurchaseOrder (isrc, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XsdExample::PurchaseOrder (isrc, h, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::XsdExample::PurchaseOrder (isrc, h, f, p);
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
      ::XsdExample::PurchaseOrder (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::XsdExample::PurchaseOrderType > (
        ::XsdExample::PurchaseOrder (
          std::move (d), f | ::xml_schema::flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PurchaseOrder" &&
        n.namespace_ () == "XsdExample.xsd")
    {
      ::std::unique_ptr< ::XsdExample::PurchaseOrderType > r (
        ::xsd::cxx::tree::traits< ::XsdExample::PurchaseOrderType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PurchaseOrder",
      "XsdExample.xsd");
  }

  ::std::unique_ptr< ::XsdExample::PurchaseOrderType >
  PurchaseOrder (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "PurchaseOrder" &&
        n.namespace_ () == "XsdExample.xsd")
    {
      ::std::unique_ptr< ::XsdExample::PurchaseOrderType > r (
        ::xsd::cxx::tree::traits< ::XsdExample::PurchaseOrderType, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "PurchaseOrder",
      "XsdExample.xsd");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace XsdExample
{
  void
  PurchaseOrder (::std::ostream& o,
                 const ::XsdExample::PurchaseOrderType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PurchaseOrder (::std::ostream& o,
                 const ::XsdExample::PurchaseOrderType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PurchaseOrder (::std::ostream& o,
                 const ::XsdExample::PurchaseOrderType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PurchaseOrder (::xercesc::XMLFormatTarget& t,
                 const ::XsdExample::PurchaseOrderType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  PurchaseOrder (::xercesc::XMLFormatTarget& t,
                 const ::XsdExample::PurchaseOrderType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PurchaseOrder (::xercesc::XMLFormatTarget& t,
                 const ::XsdExample::PurchaseOrderType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::string& e,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::XsdExample::PurchaseOrder (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  PurchaseOrder (::xercesc::DOMDocument& d,
                 const ::XsdExample::PurchaseOrderType& s,
                 ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "PurchaseOrder" &&
        n.namespace_ () == "XsdExample.xsd")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "PurchaseOrder",
        "XsdExample.xsd");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  PurchaseOrder (const ::XsdExample::PurchaseOrderType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "PurchaseOrder",
        "XsdExample.xsd",
        m, f));

    ::XsdExample::PurchaseOrder (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const PurchaseOrderType& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // ShipTo
    //
    for (PurchaseOrderType::ShipTo_const_iterator
         b (i.ShipTo ().begin ()), n (i.ShipTo ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ShipTo",
          "XsdExample.xsd",
          e));

      s << *b;
    }

    // BillTo
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "BillTo",
          "XsdExample.xsd",
          e));

      s << i.BillTo ();
    }

    // OrderDate
    //
    if (i.OrderDate ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "OrderDate",
          e));

      a << *i.OrderDate ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const USAddress& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          "XsdExample.xsd",
          e));

      s << i.name ();
    }

    // street
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "street",
          "XsdExample.xsd",
          e));

      s << i.street ();
    }

    // city
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "city",
          "XsdExample.xsd",
          e));

      s << i.city ();
    }

    // state
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "state",
          "XsdExample.xsd",
          e));

      s << i.state ();
    }

    // zip
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "zip",
          "XsdExample.xsd",
          e));

      s << i.zip ();
    }

    // country
    //
    if (i.country ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "country",
          e));

      a << *i.country ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

